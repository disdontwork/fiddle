import React, { useState } from 'react';
import { Volume2, Music, Waves, Settings2, BookOpen, Trophy, ChevronRight } from 'lucide-react';
import LevelCard from './components/LevelCard';
import AudioControls from './components/AudioControls';
import { useAudio } from './hooks/useAudio';
import { levels } from './data/levels';

function App() {
  const [selectedLevel, setSelectedLevel] = useState<number | null>(null);

  const level = selectedLevel !== null ? levels[selectedLevel] : null;
  const audioControls = level?.sounds.map(sound => useAudio(sound));

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-800">
      <header className="bg-black/30 backdrop-blur-sm border-b border-white/10">
        <div className="max-w-7xl mx-auto px-4 py-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <Waves className="w-8 h-8 text-purple-400" />
              <h1 className="text-2xl font-bold text-white">Soundscape Adventure</h1>
            </div>
            <nav className="flex items-center space-x-4">
              <button className="text-white/70 hover:text-white transition-colors">
                <BookOpen className="w-6 h-6" />
              </button>
              <button className="text-white/70 hover:text-white transition-colors">
                <Trophy className="w-6 h-6" />
              </button>
              <button className="text-white/70 hover:text-white transition-colors">
                <Settings2 className="w-6 h-6" />
              </button>
            </nav>
          </div>
        </div>
      </header>

      <main className="max-w-7xl mx-auto px-4 py-12">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {levels.map((level, index) => (
            <LevelCard
              key={level.id}
              level={level}
              isLocked={index > 0 && !levels[index - 1].completed}
              onClick={() => setSelectedLevel(index)}
            />
          ))}
        </div>

        {selectedLevel !== null && level && (
          <div className="fixed inset-0 bg-black/80 backdrop-blur-sm flex items-center justify-center p-4">
            <div className="bg-gray-900 rounded-lg max-w-4xl w-full p-6">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-2xl font-bold text-white">{level.title}</h2>
                <button
                  onClick={() => setSelectedLevel(null)}
                  className="text-white/70 hover:text-white transition-colors"
                >
                  <ChevronRight className="w-6 h-6" />
                </button>
              </div>
              <div className="prose prose-invert mb-8">
                <p className="text-gray-300">{level.description}</p>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {level.sounds.map((sound, index) => (
                  <AudioControls
                    key={sound.id}
                    name={sound.name}
                    controls={audioControls[index].controls}
                    onVolumeChange={audioControls[index].setVolume}
                    onPanChange={audioControls[index].setPan}
                    onTogglePlay={audioControls[index].togglePlay}
                  />
                ))}
              </div>

              <div className="mt-6 flex justify-end">
                <button
                  className="bg-purple-600 hover:bg-purple-700 text-white px-6 py-2 rounded-lg font-medium transition-colors"
                  onClick={() => setSelectedLevel(null)}
                >
                  Close Level
                </button>
              </div>
            </div>
          </div>
        )}
      </main>
    </div>
  );
}

export default App;
